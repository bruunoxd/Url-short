## Prometheus Helm chart values for production
## This file contains production-ready configuration for Prometheus

prometheus:
  prometheusSpec:
    # Retention configuration
    retention: 15d
    retentionSize: 10GB
    
    # Resource limits
    resources:
      requests:
        cpu: 500m
        memory: 2Gi
      limits:
        cpu: 1000m
        memory: 4Gi
    
    # Storage configuration
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: standard
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 50Gi
    
    # Service monitors configuration
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
    
    # Enable Thanos sidecar for long-term storage
    thanos:
      baseImage: quay.io/thanos/thanos
      version: v0.28.0
      objectStorageConfig:
        key: thanos.yaml
        name: thanos-objstore-config
    
    # External labels
    externalLabels:
      cluster: production
      environment: production

# AlertManager configuration
alertmanager:
  enabled: true
  config:
    global:
      resolve_timeout: 5m
      slack_api_url: '${SLACK_API_URL}'
    
    # Route configuration
    route:
      group_by: ['alertname', 'job', 'severity']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'slack-notifications'
      routes:
        - match:
            severity: critical
          receiver: 'pagerduty-critical'
          continue: true
        - match:
            severity: warning
          receiver: 'slack-notifications'
    
    # Inhibition rules
    inhibit_rules:
      - source_match:
          severity: 'critical'
        target_match:
          severity: 'warning'
        equal: ['alertname', 'namespace', 'service']
    
    # Receivers configuration
    receivers:
      - name: 'slack-notifications'
        slack_configs:
          - channel: '#alerts'
            send_resolved: true
            title: '[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .CommonLabels.alertname }}'
            text: >-
              {{ range .Alerts }}
                *Alert:* {{ .Annotations.summary }}
                *Description:* {{ .Annotations.description }}
                *Severity:* {{ .Labels.severity }}
                *Service:* {{ .Labels.service }}
                *Started:* {{ .StartsAt | since }}
              {{ end }}
      
      - name: 'pagerduty-critical'
        pagerduty_configs:
          - service_key: '${PAGERDUTY_SERVICE_KEY}'
            send_resolved: true
            description: '{{ .CommonLabels.alertname }}'
            details:
              summary: '{{ .CommonAnnotations.summary }}'
              description: '{{ .CommonAnnotations.description }}'
              severity: '{{ .CommonLabels.severity }}'
              service: '{{ .CommonLabels.service }}'
  
  # AlertManager resources
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 200m
      memory: 512Mi
  
  # AlertManager persistence
  persistence:
    enabled: true
    size: 10Gi

# Grafana configuration
grafana:
  enabled: true
  adminPassword: "${GRAFANA_ADMIN_PASSWORD}"
  
  # Persistence
  persistence:
    enabled: true
    size: 10Gi
  
  # Resources
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 200m
      memory: 512Mi
  
  # Dashboards configuration
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'url-shortener'
          orgId: 1
          folder: 'URL Shortener'
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/url-shortener
  
  # Load dashboards from ConfigMaps
  dashboardsConfigMaps:
    url-shortener: url-shortener-dashboards
  
  # Grafana plugins
  plugins:
    - grafana-piechart-panel
    - grafana-worldmap-panel
    - grafana-clock-panel
  
  # Grafana datasources
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://prometheus-server
          access: proxy
          isDefault: true
        - name: Loki
          type: loki
          url: http://loki:3100
          access: proxy
        - name: Jaeger
          type: jaeger
          url: http://jaeger-query:16686
          access: proxy

# Node exporter for host metrics
nodeExporter:
  enabled: true

# kube-state-metrics for Kubernetes metrics
kubeStateMetrics:
  enabled: true