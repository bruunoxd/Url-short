apiVersion: apps/v1
kind: Deployment
metadata:
  name: url-shortener
  namespace: url-shortener
  labels:
    app: url-shortener
    service: url-shortener
spec:
  replicas: 2
  selector:
    matchLabels:
      app: url-shortener
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: url-shortener
        service: url-shortener
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/metrics"
        sidecar.istio.io/inject: "true"
    spec:
      containers:
      - name: url-shortener
        image: url-shortener-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3001
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3001"
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: url-shortener-config
              key: postgres_host
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: url-shortener-secrets
              key: postgres_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: url-shortener-secrets
              key: postgres_password
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: url-shortener-config
              key: redis_host
        - name: RABBITMQ_HOST
          valueFrom:
            configMapKeyRef:
              name: url-shortener-config
              key: rabbitmq_host
        - name: RABBITMQ_USER
          valueFrom:
            secretKeyRef:
              name: url-shortener-secrets
              key: rabbitmq_user
        - name: RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: url-shortener-secrets
              key: rabbitmq_password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: url-shortener-secrets
              key: jwt_secret
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "200m"
            memory: "256Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 12
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: tmp-volume
          mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config-volume
        configMap:
          name: url-shortener-config
      - name: tmp-volume
        emptyDir: {}
      securityContext:
        fsGroup: 1001
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - url-shortener
              topologyKey: "kubernetes.io/hostname"
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app: url-shortener