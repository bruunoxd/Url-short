version: '3.8'

services:
  # PostgreSQL for relational data
  postgres:
    image: postgres:15-alpine
    container_name: url-shortener-postgres
    environment:
      POSTGRES_DB: url_shortener
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: url-shortener-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ClickHouse for analytics
  clickhouse:
    image: clickhouse/clickhouse-server:23.8-alpine
    container_name: url-shortener-clickhouse
    environment:
      CLICKHOUSE_DB: analytics
      CLICKHOUSE_USER: clickhouse
      CLICKHOUSE_PASSWORD: clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ for message queuing
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: url-shortener-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Adminer for database management
  adminer:
    image: adminer:4.8.1
    container_name: url-shortener-adminer
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    environment:
      ADMINER_DEFAULT_SERVER: postgres

  # URL Shortener Web Application
  web-app:
    image: node:18-alpine
    container_name: url-shortener-webapp
    working_dir: /app
    volumes:
      - ./web:/app
    ports:
      - "3000:3000"
    environment:
      - BASE_URL=http://localhost:3000
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=url_shortener
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    command: sh -c "npm install pg && node server.js"
    depends_on:
      - postgres
      - redis
      - clickhouse
      - rabbitmq

volumes:
  postgres_data:
  redis_data:
  clickhouse_data:
  rabbitmq_data:

networks:
  default:
    name: url-shortener-network