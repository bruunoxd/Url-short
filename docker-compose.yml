version: '3.8'

services:
  # API Gateway with Kong
  kong:
    image: kong:latest
    container_name: url-shortener-kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 ssl
      KONG_LOG_LEVEL: notice
      KONG_NGINX_WORKER_PROCESSES: auto
      KONG_NGINX_WORKER_CONNECTIONS: 8192
      KONG_PLUGINS: bundled,jwt,rate-limiting,cors,request-transformer,response-transformer,ip-restriction,request-size-limiting
      KONG_DNS_RESOLVER: 8.8.8.8,8.8.4.4
      KONG_TRUSTED_IPS: 0.0.0.0/0,::/0
      KONG_REAL_IP_HEADER: X-Real-IP
      KONG_REAL_IP_RECURSIVE: on
    ports:
      - "8000:8000"  # Kong proxy port
      - "8443:8443"  # Kong proxy SSL port
      - "8001:8001"  # Kong admin API
      - "8444:8444"  # Kong admin API SSL
    volumes:
      - ./docker/kong/kong.conf:/etc/kong/kong.conf
      - ./docker/kong/declarative:/usr/local/kong/declarative
    depends_on:
      - url-shortener
      - analytics
      - user-management
      - redis
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # URL Shortener Service
  url-shortener:
    build:
      context: .
      dockerfile: services/url-shortener/Dockerfile
    container_name: url-shortener-service
    environment:
      NODE_ENV: development
      PORT: 3001
      POSTGRES_HOST: postgres
      REDIS_HOST: redis
      RABBITMQ_HOST: rabbitmq
    depends_on:
      - postgres
      - redis
      - rabbitmq
    ports:
      - "3001:3001"  # Expose directly for development
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Analytics Service
  analytics:
    build:
      context: .
      dockerfile: services/analytics/Dockerfile
    container_name: url-shortener-analytics
    environment:
      NODE_ENV: development
      PORT: 3002
      CLICKHOUSE_HOST: clickhouse
      RABBITMQ_HOST: rabbitmq
    depends_on:
      - clickhouse
      - rabbitmq
    ports:
      - "3002:3002"  # Expose directly for development
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3002/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # User Management Service
  user-management:
    build:
      context: .
      dockerfile: services/user-management/Dockerfile
    container_name: url-shortener-user-management
    environment:
      NODE_ENV: development
      PORT: 3003
      POSTGRES_HOST: postgres
      REDIS_HOST: redis
    depends_on:
      - postgres
      - redis
    ports:
      - "3003:3003"  # Expose directly for development
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3003/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for relational data
  postgres:
    image: postgres:15-alpine
    container_name: url-shortener-postgres
    environment:
      POSTGRES_DB: url_shortener
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: url-shortener-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ClickHouse for analytics
  clickhouse:
    image: clickhouse/clickhouse-server:23.8-alpine
    container_name: url-shortener-clickhouse
    environment:
      CLICKHOUSE_DB: analytics
      CLICKHOUSE_USER: clickhouse
      CLICKHOUSE_PASSWORD: clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./docker/clickhouse/init.sql:/docker-entrypoint-initdb.d/init.sql
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ for message queuing
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: url-shortener-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Adminer for database management
  adminer:
    image: adminer:4.8.1
    container_name: url-shortener-adminer
    ports:
      - "8080:8080"
    depends_on:
      - postgres

volumes:
  postgres_data:
  redis_data:
  clickhouse_data:
  rabbitmq_data:

networks:
  default:
    name: url-shortener-network